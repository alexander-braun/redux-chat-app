{"version":3,"sources":["static-data.js","components/Empty.js","reducers/index.js","reducers/user.js","reducers/contacts.js","reducers/activeUserId.js","constants/action-types.js","reducers/messages.js","reducers/typing.js","store/index.js","components/Header.js","components/Chats.js","components/MessageInput.js","actions/index.js","components/Chatwindow.js","components/Main.js","containers/User.js","components/Sidebar.js","containers/App.js","index.js"],"names":["numberOfUsers","Empty","user","name","profile_pic","status","first_name","split","className","src","alt","shortid","require","txtgen","faker","_","users","Array","from","length","generateUser","contacts","mapKeys","getMessages","messagesPerUser","messages","forEach","numberOfMsgs","user_id","v","i","number","text","sentence","is_user_msg","random","boolean","findName","email","internet","avatar","generate","combineReducers","state","activeUserId","action","type","payload","message","userId","allUserMsg","Object","keys","pop","typing","store","createStore","reducer","Header","Chat","Chats","props","scrollToBottom","chatsRef","current","scrollTop","scrollHeight","React","createRef","this","ref","map","key","Component","MessageInput","value","getState","onSubmit","e","preventDefault","dispatch","onChange","setTypingValue","target","placeholder","ChatWindow","activeUser","activeMsgs","values","Main","handleUserClick","User","onClick","bind","Sidebar","contact","App","render","ReactDOM","StrictMode","document","getElementById","subscribe"],"mappings":"0PAsDuBA,E,iCChCRC,G,wBAnBD,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACLC,EAA8BD,EAA9BC,KAAMC,EAAwBF,EAAxBE,YAAaC,EAAWH,EAAXG,OACrBC,EAAaH,EAAKI,MAAM,KAAK,GAEnC,OACI,yBAAKC,UAAU,SACX,wBAAIA,UAAU,eAAd,YAAsCF,EAAtC,KACA,yBAAKG,IAAKL,EAAaM,IAAKP,EAAMK,UAAU,eAC5C,uBAAGA,UAAU,iBACT,sCADJ,IACoBH,GAEpB,4BAAQG,UAAU,cAAlB,wBACA,uBAAGA,UAAU,eAAb,0F,cDfNG,EAAUC,EAAQ,IAClBC,EAASD,EAAQ,IACjBE,EAAQF,EAAQ,IAChBG,EAAIH,EAAQ,MAEZI,GAiDiBhB,EAjDK,GAkDnBiB,MAAMC,KAAK,CAAEC,OAAQnB,IAAiB,kBAAMoB,QAjDxCC,EAAWN,EAAEO,QAAQN,EAAO,WAC5BO,EAAc,SAAAC,GACzB,IAAIC,EAAW,GAMf,OALAV,EAAEW,QAAQV,GAAO,SAAAd,GAiDnB,IAAsByB,EAhDlBF,EAASvB,EAAK0B,SAAd,eACKb,EAAEO,SA+CWK,EA/CUH,EAgDvBP,MAAMC,KAAK,CAAEC,OAAQQ,IAAgB,SAACE,EAAGC,GAAJ,MAjBrC,CACLC,OAgBgED,EAfhEE,KAAMnB,EAAOoB,WACbC,YAAapB,EAAMqB,OAAOC,eAlCoB,cAGzCX,GAKDL,IACIG,EAAY,IASjB,SAASH,IACd,MAAO,CACLjB,KAAMW,EAAMX,KAAKkC,WACjBC,MAAOxB,EAAMyB,SAASD,QACtBlC,YAAaU,EAAMyB,SAASC,SAC5BnC,OAAQQ,EAAOoB,WACfL,QAASjB,EAAQ8B,Y,WE5BNC,kBAAgB,CAC3BxC,KCNW,WAA+C,IAAjCyC,EAAgC,uDAAxBvB,IACjC,OADyD,iCAClDuB,GDMPtB,SEPW,WAA+B,IAA9BsB,EAA6B,uDAArBtB,EAAqB,iCACzC,OAAOsB,GFOPC,aGRW,WAA6C,IAAvBD,EAAsB,uDAAd,KAAME,EAAQ,uCACvD,OAAOA,EAAOC,MACV,ICJ0B,qBDKtB,OAAOD,EAAOE,QAClB,QACI,OAAOJ,IHIflB,SKRW,WAAoD,IAAlCkB,EAAiC,uDAAzBpB,EAAY,IAAKsB,EAAQ,uCAC9D,OAAOA,EAAOC,MACV,IDHoB,eCGpB,MACgCD,EAAOE,QAA3BC,EADZ,EACYA,QAASC,EADrB,EACqBA,OACXC,EAAaP,EAAMM,GACnBlB,EAASoB,OAAOC,KAAKF,GAAYG,MAAQ,EAE/C,OAAO,eACAV,EADP,eAEKM,EAFL,eAGWC,EAHX,eAISnB,EAAS,CACNA,SACAC,KAAMgB,EACNd,aAAa,OAI7B,QACI,OAAOS,ILVfW,OMTW,WAAmC,IAAnBX,EAAkB,uDAAZ,GAAIE,EAAQ,uCAC7C,OAAOA,EAAOC,MACV,IFJwB,mBEKpB,OAAOD,EAAOE,QAClB,IFLoB,eEMhB,MAAO,GACX,QACI,OAAOJ,MCNJY,EADDC,YAAYC,G,QCWXC,MAXf,YAA2B,IAATxD,EAAQ,EAARA,KACNC,EAAiBD,EAAjBC,KAAME,EAAWH,EAAXG,OAEd,OACI,4BAAQG,UAAU,UACd,wBAAIA,UAAU,gBAAgBL,GAC9B,uBAAGK,UAAU,kBAAkBH,K,gCCNrCsD,G,QAAO,SAAC,GAAiB,IAAfX,EAAc,EAAdA,QACJhB,EAAsBgB,EAAtBhB,KAAME,EAAgBc,EAAhBd,YACd,OACI,0BAAM1B,UAAS,eAAU0B,EAAc,cAAgB,KAAOF,KAiCvD4B,E,kDA5BX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAYVC,eAAiB,WACb,EAAKC,SAASC,QAAQC,UAAY,EAAKF,SAASC,QAAQE,cAZxD,EAAKH,SAAWI,IAAMC,YAFP,E,gEAMfC,KAAKP,mB,2CAILO,KAAKP,mB,+BAQL,OACI,yBAAKtD,UAAU,QAAQ8D,IAAKD,KAAKN,UAC5BM,KAAKR,MAAMpC,SAAS8C,KAAI,SAAAvB,GAAO,OAC5B,kBAAC,EAAD,CAAMA,QAASA,EAASwB,IAAKxB,EAAQjB,iB,GAtBrC0C,aCoBLC,G,gBAzBM,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACdhC,EAAQY,EAAMqB,WAYpB,OACI,0BAAMpE,UAAU,UAAUqE,SAPT,SAAAC,GACjBA,EAAEC,iBADoB,IAEdzB,EAAyBX,EAAzBW,OAAQV,EAAiBD,EAAjBC,aAChBW,EAAMyB,SCCmC,CAC7ClC,KPfwB,eOgBxBC,QAAS,CACLC,QDJ2BM,ECK3BL,ODLmCL,OAK/B,2BACIpC,UAAU,iBACVyE,SAdS,SAAAH,GACjBvB,EAAMyB,SCEgB,SAAAL,GAAK,MAAK,CACpC7B,KPX4B,mBOY5BC,QAAS4B,GDJUO,CAAeJ,EAAEK,OAAOR,SAc/BA,MAAOA,EACPS,YAAY,uBEFbC,EAfI,SAAC,GAAsB,IAApBzC,EAAmB,EAAnBA,aACZD,EAAQY,EAAMqB,WACZtB,EAAWX,EAAXW,OACFgC,EAAa3C,EAAMtB,SAASuB,GAC5B2C,EAAa5C,EAAMlB,SAASmB,GAElC,OACI,yBAAKpC,UAAU,cACX,kBAAC,EAAD,CAAQN,KAAMoF,IACd,kBAAC,EAAD,CAAO7D,SAAU0B,OAAOqC,OAAOD,KAC/B,kBAAC,EAAD,CAAcZ,MAAOrB,MCDlBmC,EAXF,SAAC,GAA4B,IAA1BvF,EAAyB,EAAzBA,KAAM0C,EAAmB,EAAnBA,aAQpB,OAAO,0BAAMpC,UAAU,QANjBoC,EAGK,kBAAC,EAAD,CAAYA,aAAcA,IAF1B,kBAAC,EAAD,CAAO1C,KAAMA,EAAM0C,aAAcA,M,QCH9C,SAAS8C,EAAT,GAAuC,IAAZ9D,EAAW,EAAXA,QACvB2B,EAAMyB,SHA4B,CAClClC,KPP8B,qBOQ9BC,QGF+BnB,IAGnC,IAce+D,EAdF,SAAC,GAAc,IAAZzF,EAAW,EAAXA,KACJC,EAA8BD,EAA9BC,KAAMC,EAAwBF,EAAxBE,YAAaC,EAAWH,EAAXG,OAE3B,OACI,yBAAKG,UAAU,OAAOoF,QAASF,EAAgBG,KAAK,KAAM3F,IACtD,yBAAKO,IAAKL,EAAaM,IAAKP,EAAMK,UAAU,cAC5C,yBAAKA,UAAU,iBACX,uBAAGA,UAAU,qBAAqBL,GAClC,uBAAGK,UAAU,wBAAwBH,MCJtCyF,G,QATC,SAAC,GAAkB,IAAhBzE,EAAe,EAAfA,SAEjB,OACE,2BAAOb,UAAU,WACda,EAASkD,KAAI,SAAAwB,GAAO,OAAI,kBAAC,EAAD,CAAM7F,KAAM6F,EAASvB,IAAKuB,EAAQnE,gBCUlDoE,EAXH,WAAO,IAAD,EACyBzC,EAAMqB,WAAvCvD,EADQ,EACRA,SAAUnB,EADF,EACEA,KAAM0C,EADR,EACQA,aAExB,OACE,yBAAKpC,UAAU,OACb,kBAAC,EAAD,CAASa,SAAU8B,OAAOqC,OAAOnE,KACjC,kBAAC,EAAD,CAAMnB,KAAMA,EAAM0C,aAAcA,MCPhCqD,EAAS,WAEb,OAAOC,IAASD,OAAO,kBAAC,IAAME,WAAP,KAAkB,kBAAC,EAAD,OAA4BC,SAASC,eAAe,UAO/FJ,IACA1C,EAAM+C,UAAUL,I","file":"static/js/main.84cc8bae.chunk.js","sourcesContent":["const shortid = require(\"shortid\"); // shortid.generate() returns a unique \"short\" id\r\nconst txtgen = require(\"txtgen\"); // txtgen.sentence() returns random \"readable\" sentences\r\nconst faker = require(\"faker\"); // faker is used for generating random fake data.\r\nconst _ = require(\"lodash\"); // lodash is a utility lib for Javascript\r\n\r\nconst users = generateUsers(10);\r\nexport const contacts = _.mapKeys(users, \"user_id\");\r\nexport const getMessages = messagesPerUser => {\r\n  let messages = {};\r\n  _.forEach(users, user => {\r\n    messages[user.user_id] = {\r\n      ..._.mapKeys(generateMsgs(messagesPerUser), \"number\")\r\n    };\r\n  });\r\n  return messages;\r\n};\r\n\r\n// just an example of how the state object is structured\r\nexport const state = {\r\n  user: generateUser(),\r\n  messages: getMessages(10),\r\n  typing: \"\",\r\n  contacts,\r\n  activeUserId: null\r\n};\r\n\r\n/**\r\n * @returns {Object} - a new user object\r\n */\r\nexport function generateUser() {\r\n  return {\r\n    name: faker.name.findName(),\r\n    email: faker.internet.email(),\r\n    profile_pic: faker.internet.avatar(),\r\n    status: txtgen.sentence(),\r\n    user_id: shortid.generate()\r\n  };\r\n}\r\n/**\r\n * @returns {Object} - a new message object\r\n */\r\nfunction generateMsg(number) {\r\n  return {\r\n    number,\r\n    text: txtgen.sentence(),\r\n    is_user_msg: faker.random.boolean()\r\n  };\r\n}\r\n/**\r\n *\r\n * @param {Number} numberOfUsers - the number of users to be generated\r\n * @param {Function} generateUser - function that generates a single user\r\n * @returns {Array} - an array of user objects with length n = numberOfUsers\r\n */\r\nfunction generateUsers(numberOfUsers) {\r\n  return Array.from({ length: numberOfUsers }, () => generateUser());\r\n}\r\n\r\nfunction generateMsgs(numberOfMsgs) {\r\n  return Array.from({ length: numberOfMsgs }, (v, i) => generateMsg(i));\r\n}","import React from 'react'\r\nimport './Empty.css'\r\n\r\nconst Empty = ({ user }) => {\r\n    const { name, profile_pic, status } = user\r\n    const first_name = name.split(' ')[0]\r\n\r\n    return (\r\n        <div className=\"Empty\">\r\n            <h1 className=\"Empty__name\">Welcome, {first_name} </h1>\r\n            <img src={profile_pic} alt={name} className=\"Empty__img\" />\r\n            <p className=\"Empty__status\">\r\n                <b>Status:</b> {status}\r\n            </p>\r\n            <button className=\"Empty__btn\">Start a conversation</button>\r\n            <p className=\"Empty__info\">\r\n                Search for someone to start chatting with or go to Contacts to see who is available\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Empty","import { combineReducers } from 'redux'\r\nimport user from './user'\r\nimport contacts from './contacts'\r\nimport activeUserId from './activeUserId'\r\nimport messages from './messages'\r\nimport typing from './typing'\r\n\r\nexport default combineReducers({\r\n    user,\r\n    contacts,\r\n    activeUserId,\r\n    messages,\r\n    typing\r\n})","import { generateUser } from '../static-data'\r\n\r\nexport default function user(state = generateUser(), action) {\r\n    return state\r\n}","import { contacts } from '../static-data'\r\n\r\nexport default (state = contacts, action) => {\r\n    return state\r\n}","import { SET_ACTIVE_USER_ID } from '../constants/action-types'\r\n\r\nexport default function activeUserId(state = null, action) {\r\n    switch(action.type) {\r\n        case SET_ACTIVE_USER_ID:\r\n            return action.payload\r\n        default:\r\n            return state\r\n    }\r\n}","export const SET_ACTIVE_USER_ID = \"SET_ACTIVE_USER_ID\"\r\nexport const SET_TYPING_VALUE = \"SET_TYPING_VALUE\"\r\nexport const SEND_MESSAGE = \"SEND_MESSAGE\"","import { getMessages } from '../static-data'\r\nimport { SEND_MESSAGE } from '../constants/action-types'\r\n\r\nexport default function messages(state = getMessages(10), action) {\r\n    switch(action.type) {\r\n        case SEND_MESSAGE:\r\n            const { message, userId } = action.payload\r\n            const allUserMsg = state[userId]\r\n            const number = Object.keys(allUserMsg).pop() + 1\r\n\r\n            return {\r\n                ...state,\r\n                [userId]: {\r\n                    ...allUserMsg,\r\n                    [number]: {\r\n                        number,\r\n                        text: message,\r\n                        is_user_msg: true\r\n                    }\r\n                }\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { SET_TYPING_VALUE, SEND_MESSAGE } from '../constants/action-types'\r\n\r\n\r\nexport default function typing(state='', action) {\r\n    switch(action.type) {\r\n        case SET_TYPING_VALUE:\r\n            return action.payload;\r\n        case SEND_MESSAGE:\r\n            return ''\r\n        default:\r\n            return state\r\n    }\r\n}","import { createStore } from 'redux'\r\nimport reducer from '../reducers/'\r\n\r\nconst store = createStore(reducer)\r\nexport default store","import React from 'react'\r\nimport './Header.css'\r\n\r\nfunction Header({ user }) {\r\n    const { name, status } = user\r\n\r\n    return (\r\n        <header className=\"Header\">\r\n            <h1 className=\"Header__name\">{name}</h1>\r\n            <p className=\"Header__status\">{status}</p>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React, { Component } from 'react'\r\nimport './Chats.css'\r\n\r\nconst Chat = ({ message }) => {\r\n    const { text, is_user_msg } = message\r\n    return (\r\n        <span className={`Chat ${is_user_msg ? 'is-user-msg' : ''}`}>{text}</span>\r\n    )\r\n}\r\n\r\nclass Chats extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.chatsRef = React.createRef()\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.scrollToBottom()\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.scrollToBottom()\r\n    }\r\n\r\n    scrollToBottom = () => {\r\n        this.chatsRef.current.scrollTop = this.chatsRef.current.scrollHeight\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Chats\" ref={this.chatsRef}>\r\n                {this.props.messages.map(message => (\r\n                    <Chat message={message} key={message.number} />\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Chats","import React from 'react'\r\nimport store from '../store'\r\nimport { setTypingValue, sendMessage } from '../actions'\r\nimport './MessageInput.css'\r\n\r\nconst MessageInput = ({ value }) => {\r\n    const state = store.getState()\r\n\r\n    const handleChange = e => {\r\n        store.dispatch(setTypingValue(e.target.value))\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        const { typing, activeUserId } = state\r\n        store.dispatch(sendMessage(typing, activeUserId))\r\n    }\r\n\r\n    return (\r\n        <form className=\"Message\" onSubmit={handleSubmit}>\r\n            <input\r\n                className=\"Message__input\"\r\n                onChange={handleChange}\r\n                value={value}\r\n                placeholder=\"write a message\"\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default MessageInput","import { \r\n    SET_ACTIVE_USER_ID, \r\n    SET_TYPING_VALUE,\r\n    SEND_MESSAGE\r\n} from '../constants/action-types'\r\n\r\nexport const setActiveUserId = id => ({\r\n    type: SET_ACTIVE_USER_ID,\r\n    payload: id\r\n})\r\n\r\nexport const setTypingValue = value => ({\r\n    type: SET_TYPING_VALUE,\r\n    payload: value\r\n})\r\n\r\nexport const sendMessage = (message, userId) => ({\r\n    type: SEND_MESSAGE,\r\n    payload: {\r\n        message,\r\n        userId\r\n    }\r\n})","import React from 'react'\r\nimport store from '../store'\r\nimport Header from '../components/Header'\r\nimport Chats from '../components/Chats'\r\nimport './Chatwindow.css'\r\nimport MessageInput from './MessageInput'\r\n\r\nconst ChatWindow = ({ activeUserId }) => {\r\n    const state = store.getState()\r\n    const { typing } = state\r\n    const activeUser = state.contacts[activeUserId]\r\n    const activeMsgs = state.messages[activeUserId]\r\n\r\n    return (\r\n        <div className=\"ChatWindow\">\r\n            <Header user={activeUser} />\r\n            <Chats messages={Object.values(activeMsgs)}/>\r\n            <MessageInput value={typing} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatWindow","import React from \"react\";\r\nimport \"./Main.css\";\r\nimport Empty from '../components/Empty'\r\nimport ChatWindow from '../components/Chatwindow'\r\n\r\nconst Main = ({ user, activeUserId }) => {\r\n  const renderMainContent = () => {\r\n    if(!activeUserId) {\r\n      return <Empty user={user} activeUserId={activeUserId} />\r\n    } else {\r\n      return <ChatWindow activeUserId={activeUserId} />\r\n    }\r\n  }\r\n  return <main className=\"Main\">{renderMainContent()}</main>;\r\n};\r\n\r\nexport default Main;","import React from 'react'\r\nimport './User.css'\r\nimport store from '../store'\r\nimport { setActiveUserId } from '../actions'\r\n\r\nfunction handleUserClick({ user_id }) {\r\n    store.dispatch(setActiveUserId(user_id))\r\n}\r\n\r\nconst User = ({ user }) => {\r\n    const { name, profile_pic, status } = user\r\n\r\n    return (\r\n        <div className=\"User\" onClick={handleUserClick.bind(null, user)}>\r\n            <img src={profile_pic} alt={name} className=\"User__pic\" />\r\n            <div className=\"User__details\">\r\n                <p className=\"User_details-name\">{name}</p>\r\n                <p className=\"User__details-status\">{status}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User","import React from \"react\";\r\nimport User from '../containers/User'\r\nimport \"./Sidebar.css\";\r\n\r\nconst Sidebar = ({ contacts }) => {\r\n  \r\n  return (\r\n    <aside className=\"Sidebar\">\r\n      {contacts.map(contact => <User user={contact} key={contact.user_id} />)}\r\n    </aside>\r\n  )\r\n};\r\n\r\nexport default Sidebar;","import React from 'react'\nimport './App.css';\nimport Main from '../components/Main'\nimport Sidebar from '../components/Sidebar'\nimport store from '../store'\n\n\nconst App = () => {\n  const { contacts, user, activeUserId } = store.getState()\n  \n  return (\n    <div className=\"App\">\n      <Sidebar contacts={Object.values(contacts)}/>\n      <Main user={user} activeUserId={activeUserId} />\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport store from './store'\n\nconst render = () => {\n  fancyLog();\n  return ReactDOM.render(<React.StrictMode><App /></React.StrictMode>, document.getElementById('root'))\n}\n\nfunction fancyLog() {\n  \n}\n\nrender()\nstore.subscribe(render)\n\n"],"sourceRoot":""}